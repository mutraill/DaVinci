# -*- coding: utf-8 -*-

# DaVinci script to apply Stripping 21 cuts with PID requirements to MC
# Decays of Xicc+ -> (Xic0(usc) -> ((Xi-(dss) -> (L0 -> p pi-)pi-) pi+) pi+ are generated by Pythia8 generator 

__author__  = 'Murdo Traill'
__date__    =  '23/12/2016'

########## IMPORT BASIC CLASSES ###################

import GaudiKernel.SystemOfUnits as Units

from Gaudi.Configuration import *
from PhysSelPython.Wrappers import AutomaticData, Selection, DataOnDemand, SelectionSequence

########## CANDIDATE LOCATION ####################

line = 'XiccXiccPlusToXicZeroPi'                    # Stripping line of interest
location = '/Event/Charm/Phys/'+line+'/Particles'   # For debugging purposes later on 

########## Build Lambda0 from pions and protons 

#################### StdLooseLambdaLL #########################

from Configurables import CombineParticles

_Lambda02Ppi_LL = CombineParticles("Lambda02Ppi_LL",
                    DecayDescriptor = "[Lambda0 -> p+ pi-]cc",
                    DaughtersCuts = {'p+': '(P>2*GeV) & (MIPCHI2DV(PRIMARY)>9)', 'pi+': '(P>2*GeV) & (MIPCHI2DV(PRIMARY)>9)'},
                    CombinationCut = "(ADAMASS('Lambda0')<50*MeV) & (ADOCACHI2CUT(30, ''))",
                    MotherCut = "(ADMASS('Lambda0')<35*MeV) & (VFASPF(VCHI2)<30)")    

# Choose what protons and pions to make the Lammbda0

from CommonParticles import StdNoPIDsPions, StdNoPIDsProtons               
   
Pions = DataOnDemand(Location = 'Phys/StdNoPIDsPions/Particles')
Protons  = DataOnDemand(Location = 'Phys/StdNoPIDsProtons/Particles')

AllPions = DataOnDemand(Location = 'Phys/StdAllNoPIDsPions/Particles')

# Make a selection object for the Lambda_0 LL candidates using the algorithm defined above, feeding in the protoparticles. 

Sel_Lambda02KPpi_LL = Selection("Sel_Lambda02KPpi_LL", 
                              Algorithm = _Lambda02Ppi_LL, 
                              RequiredSelections = [Pions, Protons])

############### Build the Xi- particle from our lambda0's and now more pions ###########

############ Pick our pions #############

from Configurables import FilterDesktop 
                   
_LoosePions_LL = FilterDesktop("LoosePions_LL",
                       Code = "(PT>250*MeV) & (MIPCHI2DV(PRIMARY) > 4.)")

Sel_LoosePions_LL = Selection("Sel_LoosePions_LL",
                      Algorithm = _LoosePions_LL,
                      RequiredSelections = [AllPions])

_XiccCombineXi_LL = CombineParticles("XiccCombineXi_LL",
          DecayDescriptor = "[Xi- -> Lambda0 pi-]cc",
          DaughtersCuts = { '':'ALL' ,'Lambda0'  : 'ALL','Lambda~0' : 'ALL','pi+': '(P>2000.0)& (TRCHI2DOF<4.0)& (PT>250.0)& (MIPCHI2DV(PRIMARY)>25.0)','pi-': '(P>2000.0)& (TRCHI2DOF<4.0)& (PT>250.0)& (MIPCHI2DV(PRIMARY)>25.0)'},
          CombinationCut = "(ADAMASS('Xi-') < 50.0 * MeV)",
          MotherCut = "(ADMASS('Xi-')<35*MeV) & (VFASPF(VCHI2)<20)")

Sel_XiccCombineXi_LL = Selection("Sel_XiccCombineXi_LL", 
                              Algorithm = _XiccCombineXi_LL, 
                              RequiredSelections = [Sel_Lambda02KPpi_LL, Sel_LoosePions_LL])

##################################################################################################################

#################### StdLooseLambdaDD #########################

_Lambda02Ppi_DD = CombineParticles("Lambda02Ppi_DD",
                DecayDescriptor = "[Lambda0 -> p+ pi-]cc",
                DaughtersCuts = {'p+': '(P>2*GeV) & (MIPCHI2DV(PRIMARY)>4)', 'pi+': '(P>2*GeV) & (MIPCHI2DV(PRIMARY)>4)'},
                CombinationCut = "(ADAMASS('Lambda0')<80*MeV) & (ADOCACHI2CUT(25, ''))",
                MotherCut = "(ADMASS('Lambda0')<64*MeV) & (VFASPF(VCHI2)<25)")

# Choose what protons and pions to make the Lammbda0

from CommonParticles import StdNoPIDsDownPions, StdNoPIDsDownProtons              
   
DownPions = DataOnDemand(Location = 'Phys/StdNoPIDsDownPions/Particles')
DownProtons  = DataOnDemand(Location = 'Phys/StdNoPIDsDownProtons/Particles')

# Make a selection object for the Lambda_0 LL candidates using the algorithm defined above, feeding in the protoparticles. 

Sel_Lambda02KPpi_DD = Selection("Sel_Lambda02KPpi_DD", 
                              Algorithm = _Lambda02Ppi_DD, 
                              RequiredSelections = [DownPions, DownProtons])

############### Build the Xi- particle from our lambda0's and now more pions ###########

############ Pick our pions #############

from Configurables import FilterDesktop 
                   
_LoosePions_DD = FilterDesktop("LoosePions_DD",
                       Code = "(PT>250*MeV) & (MIPCHI2DV(PRIMARY) > 4.)")

Sel_LoosePions_DD = Selection("Sel_LoosePions_DD",
                      Algorithm = _LoosePions_DD,
                      RequiredSelections = [AllPions])

_XiccCombineXi_DD = CombineParticles("XiccCombineXi_DD",
          DecayDescriptor = "[Xi- -> Lambda0 pi-]cc",
          DaughtersCuts ={ ''        : 'ALL' , 
                           'Lambda0' : 'ALL' , 'Lambda~0' : 'ALL', 
                           'pi+'     : '(P>2000.0)& (TRCHI2DOF<4.0)& (PT>250.0)& (MIPCHI2DV(PRIMARY)>25.0)', 
                           'pi-'     : '(P>2000.0)& (TRCHI2DOF<4.0)& (PT>250.0)& (MIPCHI2DV(PRIMARY)>25.0)'},
          CombinationCut = "(ADAMASS('Xi-') < 80.0 * MeV)",
          MotherCut = "(ADMASS('Xi-') < 50.0 * MeV )&(VFASPF(VCHI2)<20.0)")

Sel_XiccCombineXi_DD = Selection("Sel_XiccCombineXi_DD", 
                              Algorithm = _XiccCombineXi_DD, 
                              RequiredSelections = [Sel_Lambda02KPpi_DD, Sel_LoosePions_DD])

####################################################################################################################

_XiccCombineXi = FilterDesktop("XiccCombineXi",
                       Code = "ALL")

Sel_XiccCombineXi = Selection("Sel_XiccCombineXi", 
                              Algorithm = _XiccCombineXi, 
                              RequiredSelections = [Sel_XiccCombineXi_LL, Sel_XiccCombineXi_DD])

############################### Configure Trigger Requirment ##################################       ## Removed for now!                  
                          
#from Configurables import TisTosParticleTagger (removing for now)

#_XiccCombineXiTisTos = TisTosParticleTagger("XiccCombineXiTisTos", TisTosSpecs = { 'Hlt2.*ChargedHyperon.*Decision%TOS' : 0 })

## Make a selection object for the TISTOS result of the filtered Xi- candidates. 

#Sel_XiccCombineXiTisTos = Selection("Sel_XiccCombineXiTisTos", 
#							Algorithm = _XiccCombineXiTisTos, 
#							RequiredSelections = [Sel_XiccCombineXi])

############## Build the Xi0 from your Xi-'s' and more filtered pions ####################################

_XiccFilteredPions = FilterDesktop("_XiccFilteredPions ",
                       Code = "(TRCHI2DOF<5.0)& (P>2000.0) & (PT>250.0)& (MIPCHI2DV(PRIMARY)>-1.0)")

Sel_XiccFilteredPions = Selection("Sel_XiccFilteredPions",
                        Algorithm = _XiccFilteredPions,
                        RequiredSelections = [AllPions])

_XiccCombineXicZero = CombineParticles("XiccCombineXicZero",
          DecayDescriptor = "[Xi_c0 -> Xi- pi+]cc",
          DaughtersCuts = {'' : 'ALL' , 'Xi-' : 'ALL' , 'Xi~+' : 'ALL' , 'pi+' : 'ALL' , 'pi-' : 'ALL' },
          CombinationCut = "(ADAMASS('Xi_c0') < 170.0 )",
          MotherCut = "(ADMASS('Xi_c0') < 120.0)& (VFASPF(VCHI2)<30.0)& (BPVVDCHI2 > 25.0 )& (BPVDIRA > 0.9)")
     
Sel_XiccCombineXicZero= Selection("Sel_XiccCombineXicZero", 
                              Algorithm = _XiccCombineXicZero, 
                              RequiredSelections = [Sel_XiccCombineXi, Sel_XiccFilteredPions])

############## Build the Xicc from your Xi0s and more filtered pions ####################################

_XiccPlusToXicZeroPi = CombineParticles("XiccPlusToXicZeroPi",
          DecayDescriptor = " [Xi_cc+ -> Xi_c0 pi+]cc",
          DaughtersCuts = { '' : 'ALL' , 'Xi_c0' : 'ALL' , 'Xi_c~0' : 'ALL' , 'pi+' : 'ALL' , 'pi-' : 'ALL' },
          CombinationCut = "(AM<4000.0)& (APT>2000.0)& (ADOCAMAX('')<0.5)",
          MotherCut = "(VFASPF(VCHI2)<20.0)&(CHILD(VFASPF(VZ),1) - VFASPF(VZ) > 0.01)& (BPVVDCHI2 > -1.0)& (BPVDIRA > 0.0)")
    
Sel_XiccPlusToXicZeroPi = Selection("Sel_XiccPlusToXicZeroPi ", 
                              Algorithm = _XiccPlusToXicZeroPi , 
                              RequiredSelections = [Sel_XiccCombineXicZero, Sel_XiccFilteredPions])

#####################################################################################################################

# Configure the order of selections to be carried out in sequentially with the last selection at the top. 

Seq_XiccPlusToXicZeroPi = SelectionSequence("Seq_XiccPlusToXicZeroPi" , TopSelection = Sel_XiccPlusToXicZeroPi)

###################### CONFIGURE DECAY TREE TUPLE ###########################

# Using DecayTreeTuple to give reconstructed information in our final ntuple 

from Configurables import DecayTreeTuple, MCDecayTreeTuple, TupleToolTrigger, TupleToolDecay, TupleToolTISTOS
from DecayTreeTuple.Configuration import *

simulation = True

tuple = DecayTreeTuple() 
tuple.Decay = "[Xi_cc+ -> ^(Xi_c0 -> ^(Xi- -> ^(Lambda0 -> ^p+ ^pi-) ^pi-) ^pi+) ^pi+]CC"

# Input is the resulting of the stripping the candidates
tuple.Inputs = [Seq_XiccPlusToXicZeroPi.outputLocation()]

tuple.ToolList +=  [
      "TupleToolGeometry"
    , "TupleToolKinematic"
    , "TupleToolEventInfo"
    , "TupleToolTrackInfo"  
    , "TupleToolPrimaries"
    , "TupleToolTISTOS"
    , "TupleToolAngles"
    , "TupleToolPid"
    , "TupleToolPropertime"]

if (simulation):
  tuple.addTupleTool("TupleToolMCTruth")
  tuple.addTupleTool("TupleToolMCBackgroundInfo")

# Personalise particle branch head names
tuple.addBranches({'Xicc'       : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> p+ pi-) pi-) pi+) pi+]CC',
                   'Xic0'       : '[Xi_cc+ -> ^(Xi_c0 -> (Xi- -> (Lambda0 -> p+ pi-) pi-) pi+) pi+]CC',
                   'Xi_minus'   : '[Xi_cc+ -> (Xi_c0 -> ^(Xi- -> (Lambda0 -> p+ pi-) pi-) pi+) pi+]CC',
                   'Lambda0'    : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> ^(Lambda0 -> p+ pi-) pi-) pi+) pi+]CC',
                   'proton'     : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> ^p+ pi-) pi-) pi+) pi+]CC',
                   'pion1'      : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> p+ ^pi-) pi-) pi+) pi+]CC',
                   'pion2'      : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> p+ pi-) ^pi-) pi+) pi+]CC',
                   'pion3'      : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> p+ pi-) pi-) ^pi+) pi+]CC',
                   'pion4'      : '[Xi_cc+ -> (Xi_c0 -> (Xi- -> (Lambda0 -> p+ pi-) pi-) pi+) ^pi+]CC'})

# Change the configuration of the TupleToolTISTOS tool 
tuple.addTool(TupleToolTISTOS())
tuple.TupleToolTISTOS.TriggerList = [ "Hlt1TrackAllL0Decision", 
                                      "Hlt2ChargedHyperon_Xi2Lambda0LLPiDecision",
                                      "Hlt2ChargedHyperon_Xi2Lambda0LLMuDecision",
                                      "Hlt2ChargedHyperon_Omega2Lambda0LLKDecision",
                                      "Hlt2ChargedHyperon_Xi2Lambda0DDPiDecision", 
                                      "Hlt2ChargedHyperon_Xi2Lambda0DDMuDecision",
                                      "Hlt2ChargedHyperon_Omega2Lambda0DDKDecision" ]

tuple.TupleToolTISTOS.VerboseHlt1 = True
tuple.TupleToolTISTOS.VerboseHlt2 = True

# Using Decay Tree Fitter that duplicates original Decay Tree Tuple to add more branches 
tuple.Xicc.addTupleTool('TupleToolDecayTreeFitter/ConsPV')
tuple.Xicc.ConsPV.constrainToOriginVertex = True
tuple.Xicc.ConsPV.Verbose = True

# Configure LoKi__Hybrid__TupleTool
from Configurables import LoKi__Hybrid__TupleTool

variables = { "DOCA"        :  "DOCAMAX", 
              "DIRA"        :  "BPVDIRA",
              'P'           :  "P" ,
              'VTX_CHI2'    :  "VFASPF(VCHI2)",
              'VTX_VZ'      :  "VFASPF(VZ)",
              'MIPCHI2DV'   :  "MIPCHI2DV(PRIMARY)",
              'BPVVDCHI2'   :   "BPVVDCHI2"}
                             
XiccLoKiTuple = LoKi__Hybrid__TupleTool('XiccLoKiTuple')
XiccLoKiTuple.Variables = variables

tuple.Xicc.ToolList = ["LoKi::Hybrid::TupleTool/XiccLoKiTuple"]
tuple.Xicc.addTool(XiccLoKiTuple)
tuple.Xicc.InheritTools = True

tuple.Xic0.ToolList = ["LoKi::Hybrid::TupleTool/XiccLoKiTuple"]
tuple.Xic0.addTool(XiccLoKiTuple)
tuple.Xic0.InheritTools = True

tuple.Xi_minus.ToolList = ["LoKi::Hybrid::TupleTool/XiccLoKiTuple"]
tuple.Xi_minus.addTool(XiccLoKiTuple)
tuple.Xi_minus.InheritTools = True

tuple.Lambda0.ToolList = ["LoKi::Hybrid::TupleTool/XiccLoKiTuple"]
tuple.Lambda0.addTool(XiccLoKiTuple)
tuple.Lambda0.InheritTools = True

################### CONFIGURE MCDECAY TREE TUPLE ###############################

# Using MCDecayTreeTuple to give generated information in our final ntuple
# Takes no input, stripping candidates are not passed to it as not reconstruction has taken place

mctuple = MCDecayTreeTuple()

mctuple.ToolList +=  [ 
      "MCTupleToolKinematic"
    , "MCTupleToolAngles"
    , "MCTupleToolEventType"
    , "MCTupleToolPID"
    , "MCTupleToolPrimaries"
    , "MCTupleToolPrompt"
    , "MCTupleToolInteractions"
    , "MCTupleToolReconstructed"
    , "MCTupleToolHierarchy"]

# Head of the decay should be sigma-c and FS photons are radiated 
# and '=>' means search within the direct daughters, allowing arbitrary number of additional photons

mctuple.Decay = "[Sigma_c+ => ^(Xi_c0 => ^(Xi- => ^(Lambda0 => ^p+ ^pi-) ^pi-) ^pi+) ^pi+]CC" 

# Personalise particle branch head names
mctuple.addBranches({'Xicc'    : '[Sigma_c+ => (Xi_c0 => (Xi- =>(Lambda0 => p+ pi-) pi-) pi+) pi+]CC',
                     'Xic0'    : '[Sigma_c+ => ^(Xi_c0 => (Xi- => (Lambda0 => p+ pi-) pi-) pi+) pi+]CC',
                     'Xi_minus': '[Sigma_c+ => (Xi_c0 => ^(Xi- => (Lambda0 => p+ pi-) pi-) pi+) pi+]CC',
                     'Lambd0'  : '[Sigma_c+ => (Xi_c0 => (Xi- => ^(Lambda0 => p+ pi-) pi-) pi+) pi+]CC',
                     'proton'  : '[Sigma_c+ => (Xi_c0 => (Xi- => (Lambda0 => ^p+ pi-) pi-) pi+) pi+]CC',
                     'pion1'   : '[Sigma_c+ => (Xi_c0 => (Xi- => (Lambda0 => p+ ^pi-) pi-) pi+) pi+]CC',
                     'pion2'   : '[Sigma_c+ => (Xi_c0 => (Xi- => (Lambda0 => p+ pi-) ^pi-) pi+) pi+]CC',
                     'pion3'   : '[Sigma_c+ => (Xi_c0 => (Xi- => (Lambda0 => p+ pi-) pi-) ^pi+) pi+]CC',
                     'pion4'   : '[Sigma_c+ => (Xi_c0 => (Xi- => (Lambda0 => p+ pi-) pi-) pi+) ^pi+]CC'})

 ## Clone another couple of instances.
mcdtt_Lam = mctuple.clone("MCntupleLam")
mcdtt_Lam.Decay = "[Sigma_c+ => ^(Xi_c0 => ^(Xi- => ^Lambda0 ^pi-) ^pi+) ^pi+]CC"
mcdtt_Lam.addBranches({'Xicc'   : '[Sigma_c+ => (Xi_c0 => (Xi- => Lambda0  pi-) pi+) pi+]CC',
                      'Xic0'    : '[Sigma_c+ => ^(Xi_c0 => (Xi- => Lambda0 pi-) pi+) pi+]CC',
                      'Xi_minus': '[Sigma_c+ => (Xi_c0 => ^(Xi- => Lambda0 pi-) pi+) pi+]CC',
                      'Lambd0'  : '[Sigma_c+ => (Xi_c0 => (Xi- => ^Lambda0 pi-) pi+) pi+]CC',
                      'pion2'   : '[Sigma_c+ => (Xi_c0 => (Xi- => Lambda0 ^pi-) pi+) pi+]CC',
                      'pion3'   : '[Sigma_c+ => (Xi_c0 => (Xi- => Lambda0 pi-) ^pi+) pi+]CC',
                      'pion4'   : '[Sigma_c+ => (Xi_c0 => (Xi- => Lambda0 pi-) pi+) ^pi+]CC'})

mcdtt_Xi = mctuple.clone("MCntupleXi")
mcdtt_Xi.Decay = "[Sigma_c+ => ^(Xi_c0 => ^Xi- ^pi+) ^pi+]CC"
mcdtt_Xi.addBranches({'Xicc'    : '[Sigma_c+ => (Xi_c0 => Xi- pi+) pi+]CC',
                      'Xic0'    : '[Sigma_c+ => ^(Xi_c0 => Xi- pi+) pi+]CC',
                      'Xi_minus': '[Sigma_c+ => (Xi_c0 => ^Xi- pi+) pi+]CC',
                      'pion3'   : '[Sigma_c+ => (Xi_c0 => Xi- ^pi+) pi+]CC',
                      'pion4'   : '[Sigma_c+ => (Xi_c0 => Xi- pi+) ^pi+]CC'})

from Configurables import GaudiSequencer
from Configurables import PrintMCTree

printMCSig = PrintMCTree('PrintMCSigmas')
printMCSig.ParticleNames = ['Sigma_c+', 'Sigma_c~-']  ## 4212
printMCSig.OutputLevel = 0

printMCAddSeq = GaudiSequencer('PrintMCOthersSeq')
printMCAddSeq.Members = [printMCSig, mcdtt_Xi, mcdtt_Lam ]
printMCSigSeq = GaudiSequencer('PrintMCSigmasSeq')
printMCSigSeq.Members = [mctuple, printMCAddSeq]
printMCSigSeq.ModeOR = True 

####################### CONFIGURE DAVINCI  ###########################

from Configurables import DaVinci

dv = DaVinci()
dv.UserAlgorithms += [mctuple, Seq_XiccPlusToXicZeroPi.sequence(), tuple, printMCSigSeq]
 
dv.DataType = '2012'
dv.InputType = 'DST'
dv.PrintFreq = 1000
dv.EvtMax = -1        

# DDDB = Detector Description Database and CondDB = Conditions Database.

dv.DDDBtag = "dddb-20130929-1"
dv.CondDBtag = "sim-20130522-1-vc-md100"  # For MagDown
#dv.CondDBtag = "sim-20130522-1-vc-mu100" # For MagUp

dv.HistogramFile = "26165110_histos.root"   
dv.TupleFile     = "26165110_tuple.root"
dv.Simulation = True
dv.Lumi = not dv.Simulation 

################# DEBUGGING #########################

from Configurables import GaudiSequencer
from Configurables import LoKi__HDRFilter, PrintDecayTree 

MySequencer = GaudiSequencer('Sequence')

pt = PrintDecayTree(Inputs = [ location ])
sf = LoKi__HDRFilter( 'StripPassFilter', Code="HLT_PASS('Stripping"+line+"Decision')", Location="/Event/Strip/Phys/DecReports" )

MySequencer.Members = [ sf ]

dv.appendToMainSequence([MySequencer])

MessageSvc().Format = "% F%60W%S%7W%R%T %0W%M"  # useful bit of coding to increase error message output

#####################################################

#from GaudiConf import IOHelper

#IOHelper().inputFiles([
#    '/afs/cern.ch/work/m/mutraill/Data/Montecarlo/DST/MagDown/Xicc+2Xi0pi+/00041691_00000001_2.AllStreams.dst'
#], clear=True)
